#!/bin/bash

# Main function to encapsulate the script's logic
main() {
  #echo "DEBUG: \$0 inside main function: $0" >&2
  #echo "DEBUG: \$(dirname \"\$0\") inside main function: $(dirname "$0")" >&2

  local api_key=$(<~/.gemini_key) # Reads API key from ~/.gemini_key
  local action=$1
  shift

  local chat_dir="$HOME/.gemini_chats"
  mkdir -p "$chat_dir" # Ensures the chat directory exists

  # Helper function to find a chat file by its full name or ID
  # Supports chatN, full name-ID, full 8-char ID, full 10-digit timestamp ID, and 4-char suffixes.
  # Usage: find_chat_file_by_id <chat_name_or_id>
  # Returns: The full path to the chat file, or empty string if not found.
  find_chat_file_by_id() {
    local query="$1"
    local found_files=()

    # 1. Try to find by full name (e.g., chat1-simple-greeting or name-ID)
    if [ -f "$chat_dir/$query.json" ]; then
      echo "$chat_dir/$query.json"
      return 0
    fi

    # 2. Iterate through files and collect matches
    for file_path in "$chat_dir"/*.json; do
      local filename=$(basename "$file_path" .json)
      local current_full_id="" # Stores the full ID extracted from the filename

      # Try to extract ID based on known formats
      if [[ "$filename" =~ ^chat([0-9]+)-(.*)$ ]]; then # New format: chat<number>-<name>
        current_full_id="chat${BASH_REMATCH[1]}"
      elif [[ "$filename" =~ ^(.*)-([A-Za-z0-9]{8})$ ]]; then # Recent format: name-8charID
        current_full_id="${BASH_REMATCH[2]}"
      elif [[ "$filename" =~ ^(.*)-([0-9]+)$ ]]; then # Older format: name-timestampID
        current_full_id="${BASH_REMATCH[2]}"
      elif [[ "$filename" =~ ^chat([0-9]+)$ ]]; then # Very old format: chat<timestamp>
        current_full_id="${BASH_REMATCH[1]}"
      fi

      # Check for exact match (e.g., query is "chat1", "5fO73qUq", or "1748547175")
      if [ -n "$current_full_id" ] && [ "$current_full_id" == "$query" ]; then
        echo "$file_path"
        return 0 # Found exact match, return immediately
      fi

      # If query is 4 characters and not starting with "chat", check if it matches the suffix of the full ID
      # This applies to 8-char IDs and 10-digit timestamp IDs.
      if [[ "$query" =~ ^[A-Za-z0-9]{4}$ ]] && ! [[ "$query" =~ ^chat ]]; then
        if [ -n "$current_full_id" ] && [ "${current_full_id: -4}" == "$query" ]; then
          found_files+=("$file_path")
        fi
      fi
    done

    # Handle results from 4-character suffix matching
    if [ ${#found_files[@]} -eq 1 ]; then
      echo "${found_files[0]}"
      return 0
    elif [ ${#found_files[@]} -gt 1 ]; then
      echo -e "\033[1;31mAmbiguous ID '\033[1;33m$query\033[1;31m'. Matches multiple chats:\033[0m" >&2
      for f in "${found_files[@]}"; do
        echo "  - $(basename "$f" .json)" >&2
      done
      echo -e "\033[1;31mPlease use the full chat name (e.g., 'chat1-your-chat-name') or the full ID (from the filename) for clarity.\033[0m" >&2
      return 1
    fi

    echo "" # No file found
    return 1
  }

  case $action in
    new)
      local custom_name=""
      
      # Parse arguments for --name
      # Shift through arguments to find --name and its value
      local args_array=("$@") # Create an array to safely iterate and modify
      local processed_args=()
      local i=0
      while [ $i -lt ${#args_array[@]} ]; do
        local arg="${args_array[$i]}"
        if [[ "$arg" == "--name" ]]; then
          local next_arg_index=$((i+1))
          if [ "$next_arg_index" -lt ${#args_array[@]} ]; then
            custom_name="${args_array[$next_arg_index]}"
            # Skip this arg (--name) and the next arg (its value)
            i=$((i+2))
          else
            echo -e "\033[1;31mError: --name option requires an argument (the custom chat name).\033[0m"
            return 1
          fi
        else
          processed_args+=("$arg")
          i=$((i+1))
        fi
      done
      set -- "${processed_args[@]}" # Set remaining arguments as the prompt

      local prompt="$*" # The remaining arguments after parsing --name
      if [ -z "$prompt" ]; then
        echo -e "\033[1;31mPlease provide an initial prompt to start a new chat.\033[0m"
        echo "Usage: gemini new [ --name \"My Custom Name\" ] \"Tell me a joke about AI.\""
        return 1
      fi

      local base_chat_name=""
      if [ -n "$custom_name" ]; then
          # Sanitize custom name: replace non-alphanumeric (and not hyphen) with nothing, spaces with hyphens, then lowercase
          base_chat_name=$(echo "$custom_name" | sed -E 's/[^a-zA-Z0-9 ]//g' | sed -E 's/[[:space:]]+/-/g' | tr '[:upper:]' '[:lower:]')
          if [ -z "$base_chat_name" ]; then
              echo -e "\033[1;31mWarning: Custom name '$custom_name' resulted in an empty sanitized name. Falling back to AI-generated name.\033[0m" >&2
              base_chat_name="$("$(dirname "$0")/generate_chat_name.sh" "$prompt")"
          fi
      else
          # Call the external name generator script if no custom name provided
          base_chat_name="$("$(dirname "$0")/generate_chat_name.sh" "$prompt")"
          local exit_code=$? # Capture the exit code of the external script
          if [ "$exit_code" -ne 0 ]; then
              echo -e "\033[1;31m❌ Chat name generation failed. Falling back to default.\033[0m" >&2
              base_chat_name="untitled-ai-chat" # Ensure fallback if script itself failed
          fi
      fi

      # --- New Sequential ID Generation ---
      local counter_file="$chat_dir/.next_chat_id"
      local next_id=1

      if [ -f "$counter_file" ]; then
          next_id=$(cat "$counter_file")
          # Ensure it's a number and increment
          if ! [[ "$next_id" =~ ^[0-9]+$ ]]; then
              echo "WARNING: Corrupt counter file. Resetting to 1." >&2
              next_id=1
          fi
      fi

      local chat_id="chat${next_id}"
      local chat_filename_base="${chat_id}-${base_chat_name}"
      local chat_file="$chat_dir/$chat_filename_base.json"

      # In case of unlikely collision (e.g., manual file creation), increment further
      while [ -f "$chat_file" ]; do
          ((next_id++))
          chat_id="chat${next_id}"
          chat_filename_base="${chat_id}-${base_chat_name}"
          chat_file="$chat_dir/$chat_filename_base.json"
      done

      # Save the next ID for the next chat
      echo $((next_id + 1)) > "$counter_file"
      # --- End New Sequential ID Generation ---

      # Initialize JSON with current timestamp
      local current_timestamp_epoch=$(date +%s) # Unix epoch time
      local initial_json="{\"metadata\":{\"created_at\":$current_timestamp_epoch},\"history\":[]}"

      echo "$initial_json" > "$chat_file" # Creates an empty JSON array for new chat with metadata
      echo "🆕 Starting new chat: \033[1;36m$chat_filename_base\033[0m" # Highlight the new chat name

      main talk "$chat_filename_base" "$prompt" # Calls main again with 'talk' action
      ;;

    talk)
      local chat_query=$1 # This can be full name or ID
      shift
      local user_prompt="$*"

      local chat_file=$(find_chat_file_by_id "$chat_query")
      if [ -z "$chat_file" ]; then
        echo -e "\033[1;31m❌ Chat '\033[1;36m$chat_query\033[1;31m' not found, or ID is ambiguous. Use 'gemini list' to see available chats and their IDs.\033[0m"
        return 1
      fi

      if [ -z "$user_prompt" ]; then
        echo "Please provide a prompt for the chat."
        return 1
      fi

      # Read existing history for API call
      local chat_history=$(jq -r '.history' "$chat_file" 2>/dev/null)
      if [ -z "$chat_history" ] || [ "$chat_history" == "null" ]; then
          chat_history="[]" # Initialize if history is missing or null
      fi

      # Add user's prompt to the chat history
      local updated_history=$(echo "$chat_history" | jq --arg text "$user_prompt" '. + [{"role":"user","parts":[{"text":$text}]}]')
      if [ $? -ne 0 ]; then
          echo -e "\033[1;31m❌ Failed to update chat history with user prompt (jq error).\033[0m" >&2
          return 1
      fi

      # Save the updated history back into the file under the "history" key
      if ! jq --argjson new_history "$updated_history" '.history = $new_history' "$chat_file" > "$chat_file.tmp" || ! mv "$chat_file.tmp" "$chat_file"; then
        echo -e "\033[1;31m❌ Failed to save updated chat history with user prompt to file.\033[0m"
        return 1
      fi

      # Call the API with only the history array
      local response=$(curl -s -X POST \
        -H "Content-Type: application/json" \
        "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=$api_key" \
        -d "{\"contents\": $updated_history }") # Use updated_history here

      # Check for curl errors
      if [ $? -ne 0 ]; then
        echo -e "\033[1;31m❌ API request failed. Check your network connection or API key.\033[0m"
        return 1
      fi

      local reply=$(echo "$response" | jq -r '.candidates[0].content.parts[0].text' 2>/dev/null)

      # Check if jq successfully extracted the reply
      if [ -z "$reply" ] || [ "$reply" == "null" ]; then
        echo -e "\033[1;31m❌ Failed to get a valid reply from Gemini API. Raw response for debugging:\033[0m"
        echo "$response" | jq . # Pretty print the raw response
        return 1
      fi

      echo -e "\n\033[1;32m--- Gemini's Response ---\033[0m\n" # Separator
      echo -e "\033[1;32mGemini:\033[0m"
      echo "$reply" | glow - # Pipe the reply through glow for beautiful Markdown rendering
      echo -e "\n\033[1;32m--- End of Response ---\033[0m\n" # Separator

      # Add Gemini's reply to the chat history
      local final_history=$(echo "$updated_history" | jq --arg text "$reply" '. + [{"role":"model","parts":[{"text":$text}]}]')
       if [ $? -ne 0 ]; then
          echo -e "\033[1;31m❌ Failed to update chat history with Gemini's reply (jq error).\033[0m" >&2
          return 1
      fi
      if ! jq --argjson final_history "$final_history" '.history = $final_history' "$chat_file" > "$chat_file.tmp" || ! mv "$chat_file.tmp" "$chat_file"; then
        echo -e "\033[1;31m❌ Failed to save final chat history with Gemini's reply to file.\033[0m"
        return 1
      fi
      ;;

    view)
      local chat_query=$1
      local chat_file=$(find_chat_file_by_id "$chat_query")
      if [ -z "$chat_file" ]; then
        echo -e "\033[1;31m❌ Chat '\033[1;36m$chat_query\033[1;31m' not found. Use 'gemini list' to see available chats and their IDs.\033[0m"
        return 1
      fi
      # Read the history array from the JSON file
      jq -r '.history[] | if .role == "user" then "\033[1;34mYou:\033[0m \(.parts[0].text)" elif .role == "model" then "\033[1;32mGemini:\033[0m \(.parts[0].text)" else . end' "$chat_file" | glow -
      ;;

    list)
      echo "🗄️ Your Gemini Chats:"
      echo "💡 Use IDs or full chat names with 'talk', 'view', 'clear'."
      local chat_files=$(ls -1 "$chat_dir/"*.json 2>/dev/null | sort -V) # Sort files numerically
      if [ -z "$chat_files" ]; then
        echo "No chats found."
      else
        for chat_file in $chat_files; do
          local chat_name=$(basename "$chat_file" .json)
          local display_id=""
          local display_name=""
          local formatted_time=""

          # Try to read created_at from JSON metadata
          local created_at_epoch=$(jq -r '.metadata.created_at' "$chat_file" 2>/dev/null)
          if [ -n "$created_at_epoch" ] && [ "$created_at_epoch" != "null" ]; then
            formatted_time=$(date -d "@$created_at_epoch" +"%H:%M-%d,%m,%Y") # Changed format here
          else
            # Fallback to file's modification time if metadata not found
            if [ -x "$(command -v stat)" ]; then
              local file_timestamp=$(stat -c %Y "$chat_file")
              formatted_time=$(date -d "@$file_timestamp" +"%H:%M-%d,%m,%Y") # Changed format here
            else
              formatted_time="Unknown"
            fi
          fi

          # New format: chat<number>-<AI_name>
          if [[ "$chat_name" =~ ^(chat[0-9]+)-(.*)$ ]]; then
            display_id="${BASH_REMATCH[1]}"
            display_name="${BASH_REMATCH[2]}"
            echo "~id:$display_id name:$display_name time:$formatted_time"
          # Recent format: <AI_name>-8charID
          elif [[ "$chat_name" =~ ^(.*)-([A-Za-z0-9]{8})$ ]]; then
            display_name="${BASH_REMATCH[1]}"
            local full_id_for_file="${BASH_REMATCH[2]}"
            display_id="${full_id_for_file: -4}" # Use last 4 of 8-char ID
            echo "~id:$display_id name:$display_name time:$formatted_time"
          # Older format: <AI_name>-timestampID or very old chat<timestamp>
          elif [[ "$chat_name" =~ ^(.*)-([0-9]+)$ || "$chat_name" =~ ^chat([0-9]+)$ ]]; then
            # Re-match for base name depending on which regex matched
            if [[ "$chat_name" =~ ^(.*)-([0-9]+)$ ]]; then
              display_name="${BASH_REMATCH[1]}"
              local full_id_for_file="${BASH_REMATCH[2]}"
            elif [[ "$chat_name" =~ ^chat([0-9]+)$ ]]; then
              display_name="chat" # Default base name for old chat IDs
              local full_id_for_file="${BASH_REMATCH[1]}"
            fi

            if [[ "$full_id_for_file" =~ ^[0-9]+$ ]]; then
              display_id="${full_id_for_file: -4}" # Use last 4 of 10-digit ID
              echo "~id:$display_id name:$display_name time:$formatted_time"
            else
              echo "$chat_name (Unrecognized old format)"
            fi
          else
            # If no recognized format matches
            echo "$chat_name (Unrecognized format)"
          fi
        done
      fi
      ;;

    clear|delete)
      local chat_query=$1
      if [ -z "$chat_query" ]; then
        echo -e "\033[1;31mPlease specify a chat to clear/delete (name or ID). Usage: gemini clear <chat_name_or_id>\033[0m"
        return 1
      fi
      local chat_file=$(find_chat_file_by_id "$chat_query")
      if [ -z "$chat_file" ]; then
        echo -e "\033[1;31m❌ Chat '\033[1;36m$chat_query\033[1;31m' not found. Use 'gemini list' to see available chats and their IDs.\033[0m"
        return 1
      fi
      # Extract the display name from the found file for confirmation message
      local display_name=$(basename "$chat_file" .json)
      read -p "Are you sure you want to delete chat '\033[1;36m$display_name\033[0m'? This cannot be undone. (y/N): " confirm
      if [[ "$confirm" =~ ^[Yy]$ ]]; then
        rm "$chat_file"
        echo "🗑️ Chat '\033[1;36m$display_name\033[0m' deleted."
      else
        echo "Operation cancelled."
      fi
      ;;

    reset-all)
      read -p "🚨 WARNING: This will delete ALL your Gemini chat history! Are you absolutely sure? (y/N): " confirm
      if [[ "$confirm" =~ ^[Yy]$ ]]; then
        rm -f "$chat_dir/"*.json 2>/dev/null
        rm -f "$chat_dir/.next_chat_id" # Remove the counter file too
        echo "🗑️ All Gemini chats have been reset (deleted)."
      else
        echo "Operation cancelled. No chats were deleted."
      fi
      ;;

    help|*)
      echo "📚 Usage: gemini <command> [args]"
      echo ""
      echo "Commands:"
      echo "  new <prompt>                 : Start a new chat with an AI-generated name."
      echo "                                 Example: gemini new \"Explain quantum physics to a five-year-old.\""
      echo "  new --name \"My Name\" <prompt> : Start a new chat with a custom name."
      echo "                                 Example: gemini new --name \"Project XYZ Notes\" \"Summarize the meeting points.\""
      echo "  talk <chat_name_or_id> <prompt> : Continue a conversation in an existing chat."
      echo "                   <chat_name_or_id> can be:"
      echo "                   - A new 'chatN' ID (e.g., 'chat1')."
      echo "                   - The full chat name (e.g., 'chat1-project-xyz-notes')."
      echo "                   - For older chats, their full 8-char ID (e.g., 'AbC1XyZ9')."
      echo "                   - For older chats, their full 10-digit ID (e.g., '1748547175')."
      echo "                   - A 4-character suffix of an 8-char or 10-digit ID (e.g., 'XyZ9' or '7175') if unambiguous."
      echo "                   (Use 'gemini list' to see chat names and IDs)"
      echo "  view <chat_name_or_id> : Display the full history of a specific chat. Uses same ID rules as 'talk'."
      echo "                   Example: gemini view chat1"
      echo "  list           : List all your saved chats, showing their AI-generated names and concise IDs."
      echo "  clear <chat_name_or_id> : Delete a specific chat history file. Uses same ID rules as 'talk'."
      echo "                   Example: gemini clear chat1"
      echo "  reset-all      : \033[1;31mWARNING: Permanently deletes ALL your chat history files AND resets the chat counter.\033[0m"
      echo "                   Example: gemini reset-all"
      echo "  help           : Show this help message."
      ;;
  esac
}

# Call the main function with all arguments passed to the script
main "$@"
